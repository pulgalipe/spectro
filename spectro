#!/usr/bin/env bash
set -e
shopt -s nullglob
shopt -s extglob
shopt -s globstar

##########################################################################
# Copyright (C) 2015 welpo
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
##########################################################################

# Check for sox
hash sox 2>/dev/null || { printf '%s\n' >&2 "This script requires SoX but it's not installed. Aborting."; exit 1; }

############################# BEGIN CONFIGURATION #############################

# Imgur API key. Read about it and register one here: https://api.imgur.com/oauth2
api_key=f6c67fcc0af0264

# Set sha_check=1 if you wish to add SHA info to the output (uses shasum)
# Can be reversed with the -s, --sha flag
check_sha=0

# Set offline=1 if you want to create local spectrals by default
# Can be reversed with the -l, --local flag
offline=0

# Set optipng=1 if you wish to use it by default
# Can be reversed with the -o, --optipng flag
optipng=1

# Do not show 'Uploading to imgur...' text
# Necessary if you want to pipe the output
# Can be forced by using the -q, --quiet flag
quiet=

# Set text_only=1 if you wish to display the spectrals as a link, with the filename as clickable source
# Can be reversed with the -t, --text flag
text_only=1

# Local directory where files will be stored (should be inside your public_html folder) when using -l, --local:
# Do NOT use a trailing slash
local_directory="$HOME"/www/$(whoami).$(hostname -f)/public_html/spectro

# URL format (example: http://yoursite.com/spectro) for the -l, --local flag
# Do NOT use a trailing slash
url_format=https://$(hostname -f)/$(whoami)/spectro

############################## END CONFIGURATION ##############################

show_help () {
  printf '%s\n'
  printf '%s\n' "Usage:"
  printf '%s\n' "    spectro <input1> <input2> ..."
  printf '%s\n' "Input can be individual files (Ogg, MP3, WAV, AAC, ape, WMA, MP4 or FLAC) and/or directories."
  printf '%s\n'
  printf '%s\n' "Options:"
  printf '%s\n' "    -a, --animate   Create a .gif with the spectrograms of each file (requires ImageMagick)"
  printf '%s\n' "    -d, --double    Take both zoomed in and full image for each file"
  printf '%s\n' "    -h, --help      Show this help and exit"
  printf '%s\n' "    -l, --local     Reverse the setting to output the spectrograms locally"
  printf '%s\n' "    -o, --optipng   Reverse the optipng option set in the script"
  printf '%s\n' "    -p, --parallel  Play nicely with parallel (example below)"
  printf '%s\n' "    -q, --quiet     Don't show 'Uploading' text (necessary if you want to pipe)"
  printf '%s\n' "    -s, --sha       Reverse the check_sha option (to show SHA value)"
  printf '%s\n' "    -t, --text      Reverse the setting to use [url] tags or [img]"
  printf '%s\n' "    -z, --zoom      Create only zoomed in screenshot (3 seconds)"
  printf '%s\n'
  printf '%s\n' "Example: spectro -ol DirectoryWithMusic/"
  printf '%s\n'
  printf '%s\n' "Modify the first lines on the script to modify change the settings"
  printf '%s\n'
  printf '%s\n' "To process a directory with GNU parallel, first cd into it and then run:"
  printf '%s\n' "printf \"[hide=Spectrograms][size=3]\" && ls | parallel -k spectro -p; printf '%s\n' \"[/size][/hide]\""
  printf '%s\n'
}

sox_arguments=("-n remix 1 spectrogram -x 3000 -y 513 -z 120 -w Kaiser")

# Check arguments/options
while :; do
  case $1 in
    -a|--animate)
      # Check for ImageMagick
      hash convert 2>/dev/null || { printf '%s\n' >&2 "This script requires ImageMagick's convert but it's not installed. Aborting."; exit 1; }
      animate=1
      imagemagick_text=' and ImageMagick'
      ;;
    -d|--double)
      sox_arguments+=( "-n remix 1 spectrogram -x 500 -y 1025 -z 120 -w Kaiser -S 0:25 -d 0:04" )
      ;;
    -h|-\?|--help)   # Call a "show_help" function to display a synopsis, then exit.
      show_help
      exit
      ;;
    -l|--local)
      offline=$((!offline))
      ;;
    -o|--optipng)
      optipng=$((!optipng))
      ;;
    -p|--parallel)
      parallel=1
      ;;
    -q|--quiet)
      quiet=1
      ;;
    -s|--sha)
      check_sha=$((!check_sha))
      ;;
    -t|--text)
      text_only=$((!text_only))
      ;;
    -z|--zoom)
      zoom=1
      sox_arguments=("-n remix 1 spectrogram -x 500 -y 1025 -z 120 -w Kaiser -S 0:25 -d 0:04")
      ;;
    -?*)
      # Handle grouped options (eg. spectro -lot file)
      if [[ "${#1}" -ge "3" && ${1:1:1} != "-" ]]; then
        for (( i=1; i<${#1}; i++ )); do
          if [[ "${1:$i:1}" == "a" ]]; then
            hash convert 2>/dev/null || { printf '%s\n' >&2 "This script requires ImageMagick's convert but it's not installed. Aborting."; exit 1; }
            animate=1
            imagemagick_text=' and ImageMagick'
            continue
          fi
          if [[ "${1:$i:1}" == "d" ]]; then
            sox_arguments+=( "-n remix 1 spectrogram -x 500 -y 1025 -z 120 -w Kaiser -S 0:25 -d 0:04" )
            continue
          fi
          if [[ "${1:$i:1}" == "l" ]]; then
            offline=$((!offline))
            continue
          fi
          if [[ "${1:$i:1}" == "o" ]]; then
            optipng=$((!optipng))
            continue
          fi
          if [[ "${1:$i:1}" == "p" ]]; then
            parallel=1
            continue
          fi
          if [[ "${1:$i:1}" == "q" ]]; then
            quiet=1
            continue
          fi
          if [[ "${1:$i:1}" == "s" ]]; then
            check_sha=$((!check_sha))
            continue
          fi
          if [[ "${1:$i:1}" == "t" ]]; then
            text_only=$((!text_only))
            continue
          fi
          if [[ "${1:$i:1}" == "z" ]]; then
            sox_arguments=("-n remix 1 spectrogram -x 500 -y 1025 -z 120 -w Kaiser -S 0:25 -d 0:04")
            zoom=1
            continue
          fi
          ignored_options="$ignored_options""${1:$i:1}"
          continue
        done
        if [[ -n "$ignored_options" ]]; then
          printf 'WARNING: Unknown options (ignored): %s\n' "$ignored_options" >&2
        fi
      else
        printf 'WARNING: Unknown option (ignored): %s\n' "$1" >&2
      fi
      shift 1
      continue
      ;;
    --)              # End of all options.
      shift
      break
      ;;
    *)               # Default case: If no more options then break out of the loop.
      break
  esac
  shift
done

# This will center the text for the title in spectrals if using the [img]spectral[/img] method
if [[ "$text_only" != "1" ]]; then
  align_in="[align=center]"
  align_out="[/align]"
fi

# If SHA is enabled, check that shasum is on the system, if not, disable it
if [[ "$check_sha" == "1" ]]; then
  hash shasum 2>/dev/null || check_sha=0
fi

# If optipng is enabled, check that it is on the system, if not, disable it
if [[ "$optipng" == "1" ]]; then
  hash optipng 2>/dev/null || optipng=0
fi

# Only check for curl dependency when not running in offline/local mode
if [[ "$offline" != "1" ]]; then
  hash curl 2>/dev/null || { printf '%s\n' >&2 "This script requires curl but it's not installed. Aborting."; exit 1; }
fi

if [[ "$offline" == "1" ]]; then
  mkdir -p "$local_directory"
fi

# Re-set the sox arguments if using --animate to avoid huge GIFs, just uncomment the following lines:
# if [[ "$animate" == "1" ]]; then
#   sox_arguments=("-n remix 1 spectrogram -x 2000 -y 342 -z 120 -w Kaiser")
#   if [[ "${#sox_arguments[@]}" == "2" ]]; then
#     sox_arguments+=( "-n remix 1 spectrogram -x 250 -y 500 -z 120 -w Kaiser -S 0:25 -d 0:04" )
#   fi
# fi

# Check there's at least one argument
if [[ "$#" -lt 1 ]]; then
  show_help
  exit 1
fi

# Check there's at least two arguments if using --animate
if [[ "$animate" == "1" && "$#" -le 1 ]]; then
  printf '%s\n' "You need at least two files to use --animate"
  exit 1
fi

upload_to_imgur () {
  if [[ "$quiet" != "1" ]]; then
    printf "\rUploading $file_basename$zoom_url_text to imgur..."
  fi
  # Upload to imgur and replace http for https in the output
  response=$(curl -H "Authorization: CLIENT-ID $api_key" -F "image=@$output_name" \
    https://api.imgur.com/3/image.xml 2>/dev/null | tail -n +2 | sed 's/http:/https:/g' )
  sleep 3
  curl_attempt=2
  # Check for errors so we can retry
  while [[ "$curl_attempt" -le 3 && "$response" == *"error"* ]]; do
    if [[ "$quiet" != "1" ]]; then
      printf "\rSomething went wrong, trying again. Attempt $curl_attempt out of 3"
    fi
    ((curl_attempt++))
    sleep 2
    response=$(curl -H "Authorization: CLIENT-ID $api_key" -F "image=@$output_name" \
      https://api.imgur.com/3/image.xml 2>/dev/null | tail -n +2 | sed 's/http:/https:/g' )
  done
  if [[ "$response" == *"error"* ]]; then
    # Parse the actual error to display it
    curl_error=$(printf '%s\n' "$response" | sed -E 's/.*<error>(.*)<\/error>.*/\1/')
    printf "\rCouldn't upload this this image, reason: \"$curl_error\""
    rm "$output_name"
    return
  fi
  # Get the text between <link> </link> in the xml output
  url=$(printf '%s\n' "$response" | sed -E 's/.*<link>(.*)<\/link>.*/\1/')
}

show_output () {
  # Display URL with [url] tags
  if [[ "$text_only" == "1" ]]; then
    if [[ "$quiet" != "1" ]]; then
      # tput to clear until end of line
      printf "\r$(tput el)[url=$url]$file_basename$zoom_url_text[/url]\n"
    else
      printf '%s\n' "[url=$url]$file_basename$zoom_url_text[/url]"
    fi
  else
    # Display URL with [img] tags
    if [[ "$quiet" != "1" ]]; then
      printf "\r$(tput el)[img]$url[/img]\n"
    else
      printf '%s\n' "[img]$url[/img]"
    fi
  fi
}

create_spectrogram () {
  # If it's the second time we run sox or -z was used, we want the zoomed version
  if [[ "$sox_counter" == "2" || "$zoom" == 1 ]]; then
    is_zoomed=1
    if [[ "$offline" == "1" ]]; then
      # We will append this to the spectrogram filename
      zoom_filename='_zoom'
    fi
    zoom_url_text=' (Zoomed)'
  else
    # Set empty variables for multiple runs
    is_zoomed=''
    zoom_filename=''
    zoom_url_text=''
  fi

  if [[ "$offline" == "1" && "$animate" != "1" ]]; then
    # Spectrogram name: Replace invalid characters for underscore, add "zoom" and append "spectro.png"
    output_name=$(printf '%s\n' "$file_basename" | tr ";, " "_")_spectro${zoom_filename}.png
    output_name="$local_directory"/"$output_name"
    url="$url_format"/"${output_name##*/}"
  else
    # Use temporary file as output, to avoid changing the last modified date on the directory and allow parallel runs on the same directory
    output_name=$(mktemp)
  fi

  # Set title (directory name + filename)
  directory=$(dirname "$input")
  directory="${directory##*/}"
  if [[ "$directory" == "." ]]; then
    directory="${PWD##*/}"
  fi

  # Set title for SoX
  title="$directory/$file_basename"

  # Add SHA info if not using zoom (won't fit) and enabled
  if [[ "$check_sha" == "1" && "$is_zoomed" != "1" ]]; then
    title="$title (SHA $file_sha)"
  fi

  # Create the spectrogram
  sox "$file" $sox_arg -c "Created with spectro using SoX$imagemagick_text$converter_text" -t "$title" -o "$output_name" || return
  if [[ "$optipng" == "1" ]]; then optipng -quiet "$output_name"; fi

  # If using --animate, store the spectrogram file in the array, add the text, and skip to next file
  if [[ "$animate" == "1" ]]; then
    if [[ "$is_zoomed" == "1" ]]; then
      zoom_array+=( "$output_name" )
      convert "$output_name" -strokewidth 1 -pointsize 30 -draw "gravity north fill white stroke black text 0,300 \"$file_basename\"" "$output_name"
    else
      animate_array+=( "$output_name" )
      convert "$output_name" -strokewidth 2 -pointsize 120 -draw "gravity north fill white stroke black text 0,300 \"$file_basename\"" "$output_name"
    fi
    return
  fi

  # Upload to imgur and grab the URL if it's not in local mode
  if [[ "$offline" != "1" ]]; then
    upload_to_imgur
    # Delete spectrogram image
    rm "$output_name"
  fi

  show_output

}

animate (){
  # Set a pseudo-random name for the gif
  gif_name="$(cat /dev/urandom | env LC_CTYPE=C  tr -dc 'a-zA-Z0-9' | head -c 5).gif"

  if [[ "$offline" == "1" ]]; then
    output_name="$local_directory/spectro_comparison_$gif_name"
    url="$url_format"/"${output_name##*/}"
  else
    # If the image uploaded to imgur is not .gif it becomes .png.
    # Sadly BSD's mktemp doesn't have an option to append text (as a suffix, like '.gif') so this is the second best option
    output_name="$gif_directory"/"$gif_name"
  fi

  if [[ "$text_only" != "1" ]]; then printf '%s\n' "$file_basename"; fi

  # Call ImageMagick's convert to create the .gif, in a loop, with 2 seconds for each pic
  convert -delay 200 "${format_array[@]}" -loop 0 "$output_name"

  if [[ "$offline" != "1" ]]; then
    upload_to_imgur
  fi

  show_output
}

main (){
  input="$file"
  content=$(file --mime-type "$file")
  content="${content##* }"
  # Store basename for later use
  file_basename=$(basename "$file")

  # Ignore files that aren't ogg, mp3, flac, ape, aac, wav...
  if [[ "${content##* }" == *@(flac|mpeg|wav|aiff|ogg|m4a|aac|mp4|ape|asf|wma)* ]]; then
    # Print the first BBCode line and set a variable to avoid repeating it
    if [[ "$parallel" != "1" && "$valid_input" != "1" ]]; then printf "[hide=Spectrograms]$align_in[size=3]"; fi
    valid_input=1
  else
    return
  fi

  # Check if the input requires using ffmpeg/avconv
  if [[ "${content##* }" == *@(m4a|aac|mp4|ape|asf|wma)* ]]; then
    if [[ -z "$converter" ]]; then
      if hash ffmpeg 2>/dev/null; then
        converter=ffmpeg
      elif hash avconv 2>/dev/null; then
        converter=avconv
      else
        printf '%s\n' "ERROR: This file ($file) can't be processed without ffmpeg or avconv"
        return
      fi
    fi

    # After we set the converter (or ignore the file, if there's none), create the WAV file
    wav_output=$(mktemp)
    converter_text=" and $converter" && imagemagick_text=', ImageMagick'
    "$converter" -loglevel fatal -y -v 0 -i "$file" -f wav "$wav_output" 2>&1 >/dev/null
  fi

  # Only check hash if set as option. Store it for later use (as sox title & plaintext)
  if [[ "$check_sha" == "1" ]]; then file_sha=$(shasum "$file" | cut -d " " -f 1); fi

  # New line before each file, unless in --animate (we will only need one)
  if [[ "$animate" != "1" ]]; then printf '%s\n'; fi

  # Print name
  if [[ "$animate" != "1" && "$text_only" != "1" ]]; then printf '%s\n' "$file_basename"; fi

  # Show hash below name if using images (not text only)
  if [[ "$animate" != "1" && "$check_sha" == "1" && "$text_only" != "1" ]]; then printf '%s\n' "[size=1]SHA: $file_sha[/size]"; fi
  sox_counter=0

  # If we used a WAV file (used ffmpeg or avconv), set that as $file
  if [[ -n "$wav_output" ]]; then
    file="$wav_output"
  fi

  # Call function to create the spectrograms and display the URLs
  for sox_arg in "${sox_arguments[@]}"; do
    ((sox_counter++))
    create_spectrogram || return
  done

  # Show hash below the URL, for text only/url mode
  if [[ "$animate" != "1" && "$text_only" == "1" && "$check_sha" == "1" ]]; then printf '%s\n' "[size=1]SHA: $file_sha[/size]"; fi

  # Remove the WAV files if they were used
  if [[ -n "$wav_output" ]]; then
    rm "$wav_output"
    # Empty the variables before processing the next file
    wav_output=''
    converter_text=''
    if [[ "$animate" == "1" ]]; then imagemagick_text=' and ImageMagick'; fi
  fi

  # Store the basename on an array if using --animate, to use that as the output
  if [[ "$animate" == "1" ]]; then
    basename_array+=( "$file_basename" )
  fi
}

# Process the arguments
for file in "$@"; do
  if [[ -d "$file" ]]; then
    # Argument is a directory, cd into it and process all the files inside
    cd "$file"
    for file in **/*; do
      main || continue
    done
  fi
  # If it's not a directory, process the files by themselves
  if [[ -f "$file" ]]; then
    main || continue
  fi
done

if [[ "$valid_input" != "1" && "$parallel" != "1" ]]; then
  printf '%s\n' 'ERROR: Invalid input, no allowed files found (Ogg, MP3, FLAC, AAC, ape, WMA, MP4 or WAV).'
  exit 1
fi

if [[ "$animate" == "1" ]]; then
  printf '%s\n'

  zoom_filename=''
  zoom_url_text=''

  # This would be unnecessary if BSD's mktemp allowed suffixes
  if [[ "$offline" != "1" ]]; then
    gif_directory=$(mktemp -d)
  fi

  if [[ "${#animate_array[@]}" -ge 2 ]]; then
    # ImageMagick identifies the input from its extension. Since we are using mktemp we need to specify that PNG is the input.
    format_array=( "${animate_array[@]/#/png:}" )
    file_basename="${#format_array[@]} file comparison"
    animate
    rm "${animate_array[@]}"
  else
    printf '%s\n' "ERROR: You need at least two files to use --animate."
    exit 1
  fi

  if [[ "${#zoom_array[@]}" -ge 2 ]]; then
    format_array=( "${zoom_array[@]/#/png:}" )
    file_basename="${#format_array[@]} file comparison (Zoomed)"
    animate
    rm "${zoom_array[@]}"
  fi

  if [[ -n "$gif_directory" ]]; then rm -r "$gif_directory"; fi
fi

if [[ "$parallel" != "1" ]]; then printf '%s\n' "[/size]$align_out[/hide]"; fi
